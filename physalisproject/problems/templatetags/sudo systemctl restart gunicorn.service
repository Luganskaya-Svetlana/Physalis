from django import template
from django.template.defaultfilters import stringfilter
import markdown as md
from markdown.extensions import Extension
from markdown.treeprocessors import Treeprocessor
import re
import unicodedata
from xml.etree import ElementTree as etree

register = template.Library()

class CustomTOCExtension(Extension):
    def extendMarkdown(self, md):
        md.treeprocessors.register(CustomTOCTreeprocessor(md), 'toc', 15)

class CustomTOCTreeprocessor(Treeprocessor):
    def run(self, root):
        for element in root.iter():
            if element.tag in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
                text = ''.join(element.itertext())
                slug = self.slugify(text)
                element.set('id', slug)
                # Преобразуем звездочки в <em> для наклонного текста
                html_text = re.sub(r'\*([^*]+)\*', r'<em>\1</em>', text)
                toc_item = etree.Element('a', {'href': f'#{slug}'})
                toc_item.text = html_text
                # Добавляем элемент в оглавление
                toc_list.append(toc_item)

    def slugify(self, value, separator='-'):
        value = re.sub(r'<[^>]+>', '', value)
        value = unicodedata.normalize('NFKD', value)
        value = value.encode('ascii', 'ignore').decode('ascii')
        value = re.sub(r'[^\w\s-]', '', value).strip().lower()
        return re.sub(r'[\s{}]+'.format(re.escape(separator)), separator, value)

@register.filter()
@stringfilter
def markdown(value):
    return md.markdown(
        value,
        extensions=[
            'markdown.extensions.fenced_code',
            'markdown.extensions.tables',
            CustomTOCExtension(),
            'markdown.extensions.footnotes'
        ]
    )

